generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                  String            @id @default(uuid())
  commercialName      String
  nit                 String            @unique
  address             String
  description         String?
  cellPhoneNumber     String
  dateCreation        DateTime          @default(now())
  eliminated          Boolean           @default(false)
  state               Boolean           @default(true)
  accountUsers        AccountUser[]
  departments         Department[]
  employees           Employee[]
}

model Department {
  id           Int                    @id @default(autoincrement())
  name         String
  description  String?
  creationDate DateTime               @default(now())
  eliminated   Boolean                @default(false)
  companyId    String
  company      Company                @relation(fields: [companyId], references: [id])
  employees    Employee[]
  logs         LogsUpdateDepartment[]

    @@index([companyId])

}

model Employee {
  id              Int                              @id @default(autoincrement())
  departmentId    Int
  companyId       String
  position        String
  identificationNumber  String                           @unique
  email           String
  firstName       String
  lastName        String
  address         String
  cellPhoneNumber String
  dateCreation    DateTime                         @default(now())
  state           Boolean                          @default(true)
  eliminated      Boolean                          @default(false)
  account         AccountUser?
  company         Company                          @relation(fields: [companyId], references: [id])
  department      Department                       @relation(fields: [departmentId], references: [id])
  changes         LogsDepartmentChangeByEmployee[]
  logs            LogsUpdateemployee[]
  @@unique([email, companyId])

}

model AccountUser {
  id           String                 @id @default(uuid())
  email        String                 @unique
  resetKey     String?
  creationDate DateTime               @default(now())
  state        Boolean                @default(true)
  companyId    String
  employeeId   Int?                   @unique
  company      Company                @relation(fields: [companyId], references: [id])
  employee     Employee?              @relation(fields: [employeeId], references: [id])
  credential   AccountUserCredential?

    @@index([companyId])

}

model AccountUserCredential {
  id            Int         @id @default(autoincrement())
  password      String
  accountUserId String      @unique
  accountUser   AccountUser @relation(fields: [accountUserId], references: [id])
}

model LogsUpdateemployee {
  id               Int      @id @default(autoincrement())
  employeeId       Int
  modificationDate DateTime
  modifiedColumn   String
  previousData     String?
  newData          String?
  employee         Employee @relation(fields: [employeeId], references: [id])
}

model LogsUpdateDepartment {
  id               Int        @id @default(autoincrement())
  departmentId     Int
  modificationDate DateTime
  modifiedColumn   String
  previousData     String?
  newData          String?
  department       Department @relation(fields: [departmentId], references: [id])
}

model LogsDepartmentChangeByEmployee {
  id                   Int      @id @default(autoincrement())
  modificationDate     DateTime
  previousDepartmentId Int
  newDepartmentId      Int
  employeeId           Int
  employee             Employee @relation(fields: [employeeId], references: [id])
}
